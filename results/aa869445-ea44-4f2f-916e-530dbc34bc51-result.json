{"name": "test_file_search_by_type[resolution0-chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e4c7b31970837dc705b7b43a45dc0057\")>, login = None\n\n    @pytest.fixture(scope=\"module\")\n    def navigate_to_temporary(driver, login):\n        \"\"\"导航到临时文档页面\"\"\"\n        window_size = driver.get_window_size()\n        width, height = window_size[\"width\"], window_size[\"height\"]\n        wait = WebDriverWait(driver, 20)\n        try:\n            # 点击协同办公设置\n            wait.until(EC.element_to_be_clickable((By.XPATH, '//div[@class=\"menu-bar\"]/ul/li[text()=\" 协同办公 \"]'))).click()\n    \n            if width==1366:\n                #点击扩展列表\n                wait.until(EC.element_to_be_clickable((By.XPATH,'//div[@class=\"menu-bar\"]/div[@class=\"flex flex-x-center flex-y-center fold-box\"]/i'))).click()\n            #点击我的工作\n            wait.until(EC.element_to_be_clickable((By.XPATH, '//div[@class=\"sidebar-container\"]//li//span[text()=\"我的工作\"]'))).click()\n            #点击临时文档\n            wait.until(EC.element_to_be_clickable((By.XPATH, '//div[@class=\"sidebar-container\"]//li/ul//span[text()=\"临时文档\"]'))).click()\n            # 验证页面加载\n            time.sleep(2)\n            title = wait.until(EC.presence_of_element_located(\n                (By.XPATH, '//section//div[@class=\"table-info-bar flex flex-x-sb flex-y-center\"]/div[@class=\"left flex flex-y-center\"]/span[@class=\"title\"]')))\n            if title.text!=\"临时文档\" :\n                highlight_element(driver,title)\n                allure.attach(driver.get_screenshot_as_png(), name=\"文件类型查询失败截图\",attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, title)\n            assert title.text == \"临时文档\"\n        except Exception as e:\n>           raise e\n\nC:\\Users\\Administrator\\Desktop\\test\\协同办公\\我的工作\\test_临时文档.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Administrator\\Desktop\\test\\协同办公\\我的工作\\test_临时文档.py:150: in navigate_to_temporary\n    wait.until(EC.element_to_be_clickable((By.XPATH, '//div[@class=\"sidebar-container\"]//li//span[text()=\"我的工作\"]'))).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e4c7b31970837dc705b7b43a45dc0057\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001FDC7716CA0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "根据文件类型查询", "parameters": [{"name": "resolution", "value": "(1920, 1080)"}, {"name": "driver", "value": "'chrome'"}], "start": 1753512425381, "stop": 1753512425381, "uuid": "ef95d34d-90ab-4e72-befa-eb16d4b8e52b", "historyId": "2de36c417e07ee09522c05d00ecd4ddf", "testCaseId": "063636758e92bdf363e21fcf5433a56f", "fullName": "协同办公.我的工作.test_临时文档#test_file_search_by_type", "labels": [{"name": "feature", "value": "我的工作"}, {"name": "epic", "value": "协同办公"}, {"name": "story", "value": "临时文档"}, {"name": "parentSuite", "value": "协同办公.我的工作"}, {"name": "suite", "value": "test_临时文档"}, {"name": "host", "value": "JH-KF10"}, {"name": "thread", "value": "19900-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "协同办公.我的工作.test_临时文档"}]}
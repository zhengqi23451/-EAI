{"name": "test_modify[resolution0-chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f63547869f343f02135eb183a092fa5f\")>\nnavigate_to_category_management = None\n\n    @pytest.mark.parametrize(\"driver\",['chrome'],indirect=True)\n    @allure.epic(\"系统管理设置\")\n    @allure.feature(\"网站配置管理\")\n    @allure.story(\"类别管理\")\n    @allure.description(\"修改类别\")\n    def test_modify(driver,navigate_to_category_management):\n        wait = WebDriverWait(driver, 20)\n        time.sleep(3)\n        try:\n            # 选择最后一个类别\n            wait.until(EC.element_to_be_clickable(\n                (By.XPATH, '(//div[@class=\"vxe-tree--node-wrapper node--level-1\"])[last()]'))).click()\n            #点击修改按钮\n            wait.until(EC.element_to_be_clickable(\n                (By.XPATH, '//section//div[@class=\"el-card__header\"]//button[span[text()=\"修改\"]]'))).click()\n    \n            #点击保存按钮\n            wait.until(EC.element_to_be_clickable(\n                (By.XPATH, '//div[@aria-label=\"修改类别\"]//div[@class=\"el-dialog__footer\"]//button[span[text()=\"保存\"]]'))).click()\n            time.sleep(1)\n            #查询\n            text=wait.until(EC.element_to_be_clickable(\n                (By.XPATH, '//p[@class=\"el-message__content\"]')))\n            if text.text != \"更新成功\":\n                highlight_element(driver, text)\n                allure.attach(driver.get_screenshot_as_png(), name=\"修改类别失败截图\",\n                              attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, text)\n            assert text.text == \"更新成功\"\n        except Exception as e:\n>           raise e\n\nC:\\Users\\Administrator\\Desktop\\test\\系统设置\\系统管理设置\\网站配置管理\\test_类别管理.py:402: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Administrator\\Desktop\\test\\系统设置\\系统管理设置\\网站配置管理\\test_类别管理.py:393: in test_modify\n    text=wait.until(EC.element_to_be_clickable(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f63547869f343f02135eb183a092fa5f\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001FDC7E9C5E0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "修改类别", "parameters": [{"name": "resolution", "value": "(1920, 1080)"}, {"name": "driver", "value": "'chrome'"}], "start": 1753513780984, "stop": 1753513822546, "uuid": "7f4a17ef-5518-4a5f-ae94-50bdcfcb5bfd", "historyId": "ff3b9f6bda3c8fb1273014217810cf51", "testCaseId": "4748b8e9486c2381eee7f09e23f63140", "fullName": "系统设置.系统管理设置.网站配置管理.test_类别管理#test_modify", "labels": [{"name": "story", "value": "类别管理"}, {"name": "feature", "value": "网站配置管理"}, {"name": "epic", "value": "系统管理设置"}, {"name": "parentSuite", "value": "系统设置.系统管理设置.网站配置管理"}, {"name": "suite", "value": "test_类别管理"}, {"name": "host", "value": "JH-KF10"}, {"name": "thread", "value": "19900-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "系统设置.系统管理设置.网站配置管理.test_类别管理"}]}
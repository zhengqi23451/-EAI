{"name": "test_file_style[resolution0-chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7e301fea5+79173]\n\tGetHandleVerifier [0x0x7ff7e301ff00+79264]\n\t(No symbol) [0x0x7ff7e2dd9e5a]\n\t(No symbol) [0x0x7ff7e2e30586]\n\t(No symbol) [0x0x7ff7e2e3083c]\n\t(No symbol) [0x0x7ff7e2e84247]\n\t(No symbol) [0x0x7ff7e2e589af]\n\t(No symbol) [0x0x7ff7e2e8100d]\n\t(No symbol) [0x0x7ff7e2e58743]\n\t(No symbol) [0x0x7ff7e2e214c1]\n\t(No symbol) [0x0x7ff7e2e22253]\n\tGetHandleVerifier [0x0x7ff7e32ea2dd+3004797]\n\tGetHandleVerifier [0x0x7ff7e32e472d+2981325]\n\tGetHandleVerifier [0x0x7ff7e3303380+3107360]\n\tGetHandleVerifier [0x0x7ff7e303aa2e+188622]\n\tGetHandleVerifier [0x0x7ff7e30422bf+219487]\n\tGetHandleVerifier [0x0x7ff7e3028df4+115860]\n\tGetHandleVerifier [0x0x7ff7e3028fa9+116297]\n\tGetHandleVerifier [0x0x7ff7e300f558+11256]\n\tBaseThreadInitThunk [0x0x7ffab4797374+20]\n\tRtlUserThreadStart [0x0x7ffab63dcc91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f63547869f343f02135eb183a092fa5f\")>\nnavigate_to_category_management = None\n\n    @pytest.mark.parametrize(\"driver\",['chrome'],indirect=True)\n    @allure.epic(\"系统管理设置\")\n    @allure.feature(\"网站配置管理\")\n    @allure.story(\"类别管理\")\n    @allure.description(\"样式比较\")\n    def test_file_style(driver, navigate_to_category_management):\n        \"\"\"测试文件相关组件的样式\"\"\"\n        wait = WebDriverWait(driver, 20)\n        time.sleep(3)\n        # 定义预期样式\n        expected_styles = {\n            # 新增按钮样式\n            'add_button': {\n                'background-color': 'rgb(0, 150, 136)',\n                'color': 'rgb(255, 255, 255)',\n                'border-radius': '2px',\n                'width': '76px',\n                'height': '28px'\n            },\n            # 修改按钮样式\n            'modify_button': {\n                'background-color': 'rgb(60, 141, 188)',\n                'color': 'rgb(255, 255, 255)',\n                'border-radius': '2px',\n                'width': '76px',\n                'height': '28px'\n            },\n            # 删除按钮样式\n            'delete_button': {\n                'background-color': 'rgb(245, 108, 108)',\n                'color': 'rgb(255, 255, 255)',\n                'border-radius': '2px',\n                'width': '76px',\n                'height': '28px'\n            },\n            # 新增2按钮样式\n            'add2_button': {\n                'background-color': 'rgb(0, 150, 136)',\n                'color': 'rgb(255, 255, 255)',\n                'border-radius': '2px',\n                'width': '76px',\n                'height': '28px'\n            },\n            # 编辑按钮样式\n            'modify2_button': {\n                'background-color': 'rgb(0, 0, 0)',\n                'color': 'rgb(64, 128, 255)',\n                'border-radius': '3px',\n                'width': '43px',\n                'height': '19px'\n            },\n            #删除配置样式\n            'delete2_button': {\n                'background-color': 'rgb(0, 0, 0)',\n                'color': 'rgb(245, 108, 108)',\n                'border-radius': '3px',\n                'width': '43px',\n                'height': '19px'\n            },\n        }\n        time.sleep(1)\n        try:\n            #新增按钮\n            add_button = wait.until(EC.element_to_be_clickable(\n                (By.XPATH,\n                 '//section//div[@class=\"el-card__header\"]//button[span[text()=\"新增\"]]')))\n            driver.execute_script(\"arguments[0].scrollIntoView();\", add_button)\n            actual_styles = {\n                'background-color': to_rgb(add_button.value_of_css_property('background-color')),\n                'color': to_rgb(add_button.value_of_css_property('color')),\n                'border-radius': add_button.value_of_css_property('border-radius'),\n                'width': add_button.value_of_css_property('width'),\n                'height': add_button.value_of_css_property('height')\n            }\n            if actual_styles != expected_styles['add_button']:\n                highlight_element(driver,add_button)\n                allure.attach(driver.get_screenshot_as_png(), name=\"新增按钮样式匹配失败截图\",attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, add_button)\n            assert actual_styles == expected_styles['add_button'], f\"新增按钮样式不匹配: {actual_styles}\"\n    \n            #修改按钮\n            modify_button = wait.until(EC.element_to_be_clickable(\n                (By.XPATH,\n                 '//section//div[@class=\"el-card__header\"]//button[span[text()=\"修改\"]]')))\n            driver.execute_script(\"arguments[0].scrollIntoView();\", modify_button)\n            actual_styles = {\n                'background-color': to_rgb(modify_button.value_of_css_property('background-color')),\n                'color': to_rgb(modify_button.value_of_css_property('color')),\n                'border-radius': modify_button.value_of_css_property('border-radius'),\n                'width': modify_button.value_of_css_property('width'),\n                'height': modify_button.value_of_css_property('height')\n            }\n            if actual_styles != expected_styles['modify_button']:\n                highlight_element(driver,modify_button)\n                allure.attach(driver.get_screenshot_as_png(), name=\"修改按钮样式匹配失败截图\",attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, modify_button)\n            assert actual_styles == expected_styles['modify_button'], f\"修改按钮样式不匹配: {actual_styles}\"\n    \n            #删除按钮\n            delete_button = wait.until(EC.element_to_be_clickable(\n                (By.XPATH,\n                 '//section//div[@class=\"el-card__header\"]//button[span[text()=\"删除\"]]')))\n            driver.execute_script(\"arguments[0].scrollIntoView();\", delete_button)\n            actual_styles = {\n                'background-color': to_rgb(delete_button.value_of_css_property('background-color')),\n                'color': to_rgb(delete_button.value_of_css_property('color')),\n                'border-radius': delete_button.value_of_css_property('border-radius'),\n                'width': delete_button.value_of_css_property('width'),\n                'height': delete_button.value_of_css_property('height')\n            }\n            if actual_styles != expected_styles['delete_button']:\n                highlight_element(driver,delete_button)\n                allure.attach(driver.get_screenshot_as_png(), name=\"删除按钮样式匹配失败截图\",attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, delete_button)\n            assert actual_styles == expected_styles['delete_button'], f\"删除按钮样式不匹配: {actual_styles}\"\n    \n            #新增配置按钮\n            add2_button = wait.until(EC.element_to_be_clickable(\n                (By.XPATH,'//div[@class=\"left flex flex-y-center\"]//button[span[text()=\"新增\"]]')))\n            driver.execute_script(\"arguments[0].scrollIntoView();\", add2_button)\n            actual_styles = {\n                'background-color': to_rgb(add2_button.value_of_css_property('background-color')),\n                'color': to_rgb(add2_button.value_of_css_property('color')),\n                'border-radius': add2_button.value_of_css_property('border-radius'),\n                'width': add2_button.value_of_css_property('width'),\n                'height': add2_button.value_of_css_property('height')\n            }\n            if actual_styles != expected_styles['add2_button']:\n                highlight_element(driver,add2_button)\n                allure.attach(driver.get_screenshot_as_png(), name=\"新增配置按钮样式匹配失败截图\",attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, add2_button)\n            assert actual_styles == expected_styles['add2_button'], f\"新增配置按钮样式不匹配: {actual_styles}\"\n    \n            #修改2按钮\n            modify2_button = wait.until(EC.element_to_be_clickable(\n                (By.XPATH,\n                 '//tbody/tr[1]/td[contains(@class,\"col--last\")]/div/div/button[contains(@class,\"font-primary\")]')))\n            driver.execute_script(\"arguments[0].scrollIntoView();\", modify2_button)\n            actual_styles = {\n                'background-color': to_rgb(modify2_button.value_of_css_property('background-color')),\n                'color': to_rgb(modify2_button.value_of_css_property('color')),\n                'border-radius': modify2_button.value_of_css_property('border-radius'),\n                'width': modify2_button.value_of_css_property('width'),\n                'height': modify2_button.value_of_css_property('height')\n            }\n            if actual_styles != expected_styles['modify2_button']:\n                highlight_element(driver,modify2_button)\n                allure.attach(driver.get_screenshot_as_png(), name=\"修改按钮样式匹配失败截图\",attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, modify2_button)\n            assert actual_styles == expected_styles['modify2_button'], f\"修改按钮样式不匹配: {actual_styles}\"\n    \n            #删除按钮\n            delete2_button = wait.until(EC.element_to_be_clickable(\n                (By.XPATH,\n                 '//tbody/tr[1]/td[contains(@class,\"col--last\")]/div/div/button[contains(@class,\"font-danger\")]')))\n            driver.execute_script(\"arguments[0].scrollIntoView();\", delete2_button)\n            actual_styles = {\n                'background-color': to_rgb(delete2_button.value_of_css_property('background-color')),\n                'color': to_rgb(delete2_button.value_of_css_property('color')),\n                'border-radius': delete2_button.value_of_css_property('border-radius'),\n                'width': delete2_button.value_of_css_property('width'),\n                'height': delete2_button.value_of_css_property('height')\n            }\n            if actual_styles != expected_styles['delete2_button']:\n                highlight_element(driver,delete2_button)\n                allure.attach(driver.get_screenshot_as_png(), name=\"删除按钮样式匹配失败截图\",attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, delete2_button)\n            assert actual_styles == expected_styles['delete2_button'], f\"删除按钮样式不匹配: {actual_styles}\"\n    \n        except Exception as e:\n            # 截图并附加到 Allure 报告\n>           raise e\n\nC:\\Users\\Administrator\\Desktop\\test\\系统设置\\系统管理设置\\网站配置管理\\test_类别管理.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Administrator\\Desktop\\test\\系统设置\\系统管理设置\\网站配置管理\\test_类别管理.py:231: in test_file_style\n    add_button = wait.until(EC.element_to_be_clickable(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f63547869f343f02135eb183a092fa5f\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001FDC7717EC0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7e301fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff7e301ff00+79264]\nE       \t(No symbol) [0x0x7ff7e2dd9e5a]\nE       \t(No symbol) [0x0x7ff7e2e30586]\nE       \t(No symbol) [0x0x7ff7e2e3083c]\nE       \t(No symbol) [0x0x7ff7e2e84247]\nE       \t(No symbol) [0x0x7ff7e2e589af]\nE       \t(No symbol) [0x0x7ff7e2e8100d]\nE       \t(No symbol) [0x0x7ff7e2e58743]\nE       \t(No symbol) [0x0x7ff7e2e214c1]\nE       \t(No symbol) [0x0x7ff7e2e22253]\nE       \tGetHandleVerifier [0x0x7ff7e32ea2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff7e32e472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff7e3303380+3107360]\nE       \tGetHandleVerifier [0x0x7ff7e303aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff7e30422bf+219487]\nE       \tGetHandleVerifier [0x0x7ff7e3028df4+115860]\nE       \tGetHandleVerifier [0x0x7ff7e3028fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff7e300f558+11256]\nE       \tBaseThreadInitThunk [0x0x7ffab4797374+20]\nE       \tRtlUserThreadStart [0x0x7ffab63dcc91+33]\n\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "样式比较", "parameters": [{"name": "resolution", "value": "(1920, 1080)"}, {"name": "driver", "value": "'chrome'"}], "start": 1753513733563, "stop": 1753513757715, "uuid": "b53e3d50-e264-4b6b-a727-5d85cdf78863", "historyId": "775b918958946d00d1125c92b9773085", "testCaseId": "70eb9035b39cd3a6ed3e1a27c2350a7a", "fullName": "系统设置.系统管理设置.网站配置管理.test_类别管理#test_file_style", "labels": [{"name": "story", "value": "类别管理"}, {"name": "feature", "value": "网站配置管理"}, {"name": "epic", "value": "系统管理设置"}, {"name": "parentSuite", "value": "系统设置.系统管理设置.网站配置管理"}, {"name": "suite", "value": "test_类别管理"}, {"name": "host", "value": "JH-KF10"}, {"name": "thread", "value": "19900-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "系统设置.系统管理设置.网站配置管理.test_类别管理"}]}
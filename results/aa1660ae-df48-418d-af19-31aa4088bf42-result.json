{"name": "test_search_by_job[resolution0-chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7e301fea5+79173]\n\tGetHandleVerifier [0x0x7ff7e301ff00+79264]\n\t(No symbol) [0x0x7ff7e2dd9e5a]\n\t(No symbol) [0x0x7ff7e2dc5c25]\n\t(No symbol) [0x0x7ff7e2deac44]\n\t(No symbol) [0x0x7ff7e2e603c5]\n\t(No symbol) [0x0x7ff7e2e80922]\n\t(No symbol) [0x0x7ff7e2e58743]\n\t(No symbol) [0x0x7ff7e2e214c1]\n\t(No symbol) [0x0x7ff7e2e22253]\n\tGetHandleVerifier [0x0x7ff7e32ea2dd+3004797]\n\tGetHandleVerifier [0x0x7ff7e32e472d+2981325]\n\tGetHandleVerifier [0x0x7ff7e3303380+3107360]\n\tGetHandleVerifier [0x0x7ff7e303aa2e+188622]\n\tGetHandleVerifier [0x0x7ff7e30422bf+219487]\n\tGetHandleVerifier [0x0x7ff7e3028df4+115860]\n\tGetHandleVerifier [0x0x7ff7e3028fa9+116297]\n\tGetHandleVerifier [0x0x7ff7e300f558+11256]\n\tBaseThreadInitThunk [0x0x7ffab4797374+20]\n\tRtlUserThreadStart [0x0x7ffab63dcc91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1edb553fe468fedd7228ebfabaf2a9cf\")>, navigate = None\n\n    @allure.epic(\"人力资源管理\")\n    @allure.feature(\"人力资源工作\")\n    @allure.story(\"储备人员管理\")\n    @allure.description(\"岗位查询\")\n    @pytest.mark.parametrize(\"driver\",['chrome'],indirect=True)\n    def test_search_by_job(driver, navigate):\n        \"\"\"测试按文件名查询\"\"\"\n        wait = WebDriverWait(driver, 20)\n        time.sleep(3)\n        try:\n            #部门查询测试\n            wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id=\"app\"]//div[label[@for=\"fk_job_id\"]]//input'))).click()\n            time.sleep(1)\n            wait.until(EC.element_to_be_clickable((By.XPATH,'//div[@x-placement=\"bottom-start\"]//li/span[text()=\"中层管理\"]'))).click()\n    \n            wait.until(EC.presence_of_element_located(\n                (By.XPATH, '//form//button[contains(@class,\"el-button--success\")]'))).click()\n            time.sleep(2)\n    \n            wait.until(EC.presence_of_element_located(\n                (By.XPATH, '//form//button[contains(@class,\"el-button--primary\")]'))).click()\n            text=wait.until(EC.presence_of_element_located(\n                (By.XPATH, '//tbody/tr[1]/td[4]//span/span')))\n            n = text.text\n            if \"中层管理\" not in n :\n                highlight_element(driver,text)\n                allure.attach(driver.get_screenshot_as_png(), name=\"查询失败截图\",attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, text)\n            assert \"中层管理\" in n\n        except Exception as e:\n            # 截图并附加到 Allure 报告\n>           raise e\n\nC:\\Users\\Administrator\\Desktop\\test\\人力资源\\人力资源管理\\人力资源工作\\test_储备人员管理.py:385: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Administrator\\Desktop\\test\\人力资源\\人力资源管理\\人力资源工作\\test_储备人员管理.py:365: in test_search_by_job\n    wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id=\"app\"]//div[label[@for=\"fk_job_id\"]]//input'))).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:104: in _predicate\n    return driver.find_element(*locator)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:922: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028BB47FAE00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff7e300f558+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffab4797374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffab63dcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7e301fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff7e301ff00+79264]\nE       \t(No symbol) [0x0x7ff7e2dd9e5a]\nE       \t(No symbol) [0x0x7ff7e2dc5c25]\nE       \t(No symbol) [0x0x7ff7e2deac44]\nE       \t(No symbol) [0x0x7ff7e2e603c5]\nE       \t(No symbol) [0x0x7ff7e2e80922]\nE       \t(No symbol) [0x0x7ff7e2e58743]\nE       \t(No symbol) [0x0x7ff7e2e214c1]\nE       \t(No symbol) [0x0x7ff7e2e22253]\nE       \tGetHandleVerifier [0x0x7ff7e32ea2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff7e32e472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff7e3303380+3107360]\nE       \tGetHandleVerifier [0x0x7ff7e303aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff7e30422bf+219487]\nE       \tGetHandleVerifier [0x0x7ff7e3028df4+115860]\nE       \tGetHandleVerifier [0x0x7ff7e3028fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff7e300f558+11256]\nE       \tBaseThreadInitThunk [0x0x7ffab4797374+20]\nE       \tRtlUserThreadStart [0x0x7ffab63dcc91+33]\n\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "岗位查询", "parameters": [{"name": "resolution", "value": "(1920, 1080)"}, {"name": "driver", "value": "'chrome'"}], "start": 1753511446644, "stop": 1753511450742, "uuid": "33b93d06-6915-4aff-9ca4-4ba0834caf01", "historyId": "24f328ba1a3896e1ce21da4cdf7ae2f8", "testCaseId": "cd83c9f2d957f10e42c30e08ad6a0f84", "fullName": "人力资源.人力资源管理.人力资源工作.test_储备人员管理#test_search_by_job", "labels": [{"name": "story", "value": "储备人员管理"}, {"name": "feature", "value": "人力资源工作"}, {"name": "epic", "value": "人力资源管理"}, {"name": "parentSuite", "value": "人力资源.人力资源管理.人力资源工作"}, {"name": "suite", "value": "test_储备人员管理"}, {"name": "host", "value": "JH-KF10"}, {"name": "thread", "value": "18584-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "人力资源.人力资源管理.人力资源工作.test_储备人员管理"}]}
{"uid":"40c6dcdc38fd65ea","name":"test_search_by_nation[resolution0-chrome]","fullName":"人力资源.人力资源管理.人力资源工作.test_员工档案管理#test_search_by_nation","historyId":"1ae5a078b3d067e236356026db897c80","time":{"start":1753511519996,"stop":1753511522999,"duration":3003},"description":"民族查询","descriptionHtml":"<p>民族查询</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7e301fea5+79173]\n\tGetHandleVerifier [0x0x7ff7e301ff00+79264]\n\t(No symbol) [0x0x7ff7e2dd9c8c]\n\t(No symbol) [0x0x7ff7e2e205ef]\n\t(No symbol) [0x0x7ff7e2e58832]\n\t(No symbol) [0x0x7ff7e2e53233]\n\t(No symbol) [0x0x7ff7e2e522f9]\n\t(No symbol) [0x0x7ff7e2da5fc5]\n\tGetHandleVerifier [0x0x7ff7e32ea2dd+3004797]\n\tGetHandleVerifier [0x0x7ff7e32e472d+2981325]\n\tGetHandleVerifier [0x0x7ff7e3303380+3107360]\n\tGetHandleVerifier [0x0x7ff7e303aa2e+188622]\n\tGetHandleVerifier [0x0x7ff7e30422bf+219487]\n\t(No symbol) [0x0x7ff7e2da5036]\n\tGetHandleVerifier [0x0x7ff7e3403c78+4158232]\n\tBaseThreadInitThunk [0x0x7ffab4797374+20]\n\tRtlUserThreadStart [0x0x7ffab63dcc91+33]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"17ffa450138250135307c8d42fe2da4f\")>, navigate = None\n\n    @allure.epic(\"人力资源管理\")\n    @allure.feature(\"人力资源工作\")\n    @allure.story(\"员工档案管理\")\n    @allure.description(\"民族查询\")\n    @pytest.mark.parametrize(\"driver\",['chrome'],indirect=True)\n    def test_search_by_nation(driver, navigate):\n        \"\"\"测试按文件名查询\"\"\"\n        wait = WebDriverWait(driver, 20)\n        time.sleep(3)\n        try:\n            #部门查询测试\n            wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id=\"app\"]//div[label[@for=\"nation\"]]//input'))).click()\n            time.sleep(1)\n            wait.until(EC.element_to_be_clickable((By.XPATH,'//div[@x-placement=\"bottom-start\"]//li/span[text()=\"汉族\"]'))).click()\n    \n            wait.until(EC.presence_of_element_located(\n                (By.XPATH, '//form//button[contains(@class,\"el-button--success\")]'))).click()\n            time.sleep(2)\n    \n            wait.until(EC.presence_of_element_located(\n                (By.XPATH, '//form//button[contains(@class,\"el-button--primary\")]'))).click()\n            text=wait.until(EC.presence_of_element_located(\n                (By.XPATH, '//tbody/tr[1]/td[9]//span/span')))\n            n = text.text\n            if \"汉族\" not in n :\n                highlight_element(driver,text)\n                allure.attach(driver.get_screenshot_as_png(), name=\"查询失败截图\",attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, text)\n            assert \"汉族\" in n\n        except Exception as e:\n            # 截图并附加到 Allure 报告\n>           raise e\n\nC:\\Users\\Administrator\\Desktop\\test\\人力资源\\人力资源管理\\人力资源工作\\test_员工档案管理.py:630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Administrator\\Desktop\\test\\人力资源\\人力资源管理\\人力资源工作\\test_员工档案管理.py:610: in test_search_by_nation\n    wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id=\"app\"]//div[label[@for=\"nation\"]]//input'))).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:104: in _predicate\n    return driver.find_element(*locator)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:922: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028BB4A54350>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...7e3403c78+4158232]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffab4797374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffab63dcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7e301fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff7e301ff00+79264]\nE       \t(No symbol) [0x0x7ff7e2dd9c8c]\nE       \t(No symbol) [0x0x7ff7e2e205ef]\nE       \t(No symbol) [0x0x7ff7e2e58832]\nE       \t(No symbol) [0x0x7ff7e2e53233]\nE       \t(No symbol) [0x0x7ff7e2e522f9]\nE       \t(No symbol) [0x0x7ff7e2da5fc5]\nE       \tGetHandleVerifier [0x0x7ff7e32ea2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff7e32e472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff7e3303380+3107360]\nE       \tGetHandleVerifier [0x0x7ff7e303aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff7e30422bf+219487]\nE       \t(No symbol) [0x0x7ff7e2da5036]\nE       \tGetHandleVerifier [0x0x7ff7e3403c78+4158232]\nE       \tBaseThreadInitThunk [0x0x7ffab4797374+20]\nE       \tRtlUserThreadStart [0x0x7ffab63dcc91+33]\n\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"cleanup","time":{"start":1753511519995,"stop":1753511519995,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[{"name":"cleanup::0","time":{"start":1753511523124,"stop":1753511523132,"duration":8},"status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7e301fea5+79173]\n\tGetHandleVerifier [0x0x7ff7e301ff00+79264]\n\t(No symbol) [0x0x7ff7e2dd9c8c]\n\t(No symbol) [0x0x7ff7e2e205ef]\n\t(No symbol) [0x0x7ff7e2e58832]\n\t(No symbol) [0x0x7ff7e2e53233]\n\t(No symbol) [0x0x7ff7e2e522f9]\n\t(No symbol) [0x0x7ff7e2da5fc5]\n\tGetHandleVerifier [0x0x7ff7e32ea2dd+3004797]\n\tGetHandleVerifier [0x0x7ff7e32e472d+2981325]\n\tGetHandleVerifier [0x0x7ff7e3303380+3107360]\n\tGetHandleVerifier [0x0x7ff7e303aa2e+188622]\n\tGetHandleVerifier [0x0x7ff7e30422bf+219487]\n\t(No symbol) [0x0x7ff7e2da5036]\n\tGetHandleVerifier [0x0x7ff7e3403c78+4158232]\n\tBaseThreadInitThunk [0x0x7ffab4797374+20]\n\tRtlUserThreadStart [0x0x7ffab63dcc91+33]\n\n","statusTrace":"  File \"D:\\t\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n           ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"D:\\t\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 938, in _teardown_yield_fixture\n    next(it)\n    ~~~~^^^^\n  File \"D:\\test\\conftest.py\", line 8, in cleanup\n  File \"D:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 779, in delete_all_cookies\n    self.execute(Command.DELETE_ALL_COOKIES)\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 454, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"D:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"story","value":"员工档案管理"},{"name":"feature","value":"人力资源工作"},{"name":"epic","value":"人力资源管理"},{"name":"parentSuite","value":"人力资源.人力资源管理.人力资源工作"},{"name":"suite","value":"test_员工档案管理"},{"name":"host","value":"JH-KF10"},{"name":"thread","value":"18584-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"人力资源.人力资源管理.人力资源工作.test_员工档案管理"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'chrome'"},{"name":"resolution","value":"(1920, 1080)"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"40c6dcdc38fd65ea.json","parameterValues":["'chrome'","(1920, 1080)"]}
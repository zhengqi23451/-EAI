{"uid":"c27ad00ad0ae948b","name":"test_move[resolution0-chrome]","fullName":"系统设置.人力资源设置.组织架构设置.test_部门设置#test_move","historyId":"0bae28f71871d8a4ded0c5c23a1d7b55","time":{"start":1753512822460,"stop":1753512857267,"duration":34807},"description":"编辑排序","descriptionHtml":"<p>编辑排序</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7e301fea5+79173]\n\tGetHandleVerifier [0x0x7ff7e301ff00+79264]\n\t(No symbol) [0x0x7ff7e2dd9e5a]\n\t(No symbol) [0x0x7ff7e2e30586]\n\t(No symbol) [0x0x7ff7e2e3083c]\n\t(No symbol) [0x0x7ff7e2e84247]\n\t(No symbol) [0x0x7ff7e2e589af]\n\t(No symbol) [0x0x7ff7e2e8100d]\n\t(No symbol) [0x0x7ff7e2e58743]\n\t(No symbol) [0x0x7ff7e2e214c1]\n\t(No symbol) [0x0x7ff7e2e22253]\n\tGetHandleVerifier [0x0x7ff7e32ea2dd+3004797]\n\tGetHandleVerifier [0x0x7ff7e32e472d+2981325]\n\tGetHandleVerifier [0x0x7ff7e3303380+3107360]\n\tGetHandleVerifier [0x0x7ff7e303aa2e+188622]\n\tGetHandleVerifier [0x0x7ff7e30422bf+219487]\n\tGetHandleVerifier [0x0x7ff7e3028df4+115860]\n\tGetHandleVerifier [0x0x7ff7e3028fa9+116297]\n\tGetHandleVerifier [0x0x7ff7e300f558+11256]\n\tBaseThreadInitThunk [0x0x7ffab4797374+20]\n\tRtlUserThreadStart [0x0x7ffab63dcc91+33]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0694a2be64a4da7745c9b3bdbc5c2e96\")>\nnavigate_to_department = None\n\n    @allure.epic(\"人力资源设置\")\n    @allure.feature(\"组织架构设置\")\n    @allure.story(\"部门设置\")\n    @allure.description(\"编辑排序\")\n    @pytest.mark.parametrize(\"driver\",['chrome'],indirect=True)\n    def test_move(driver, navigate_to_department):\n        wait = WebDriverWait(driver, 30)\n        time.sleep(3)\n        try:\n            # 点击编辑排序\n            element = wait.until(EC.element_to_be_clickable(\n                (By.XPATH, '//button[contains(@class, \"el-button--primary\")]/span[contains(text(), \"编辑排序\")]')))\n            #driver.execute_script(\"arguments[0].scrollIntoView();\", element)\n            element.click()\n            # 点击董事办\n            wait.until(EC.element_to_be_clickable(\n                (By.XPATH, \"//div[@class='el-dialog__body']//div[contains(@class,'el-tree') and contains(@class,'el-tree-node')]/div[contains(@class,'el-tree-node__content')]/span[text()='董事办']\"))).click()\n    \n            # 找到需要拖动的元素和目标位置\n            source_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[contains(@class, 'el-tree-node__children')]/div[3]/div\")))  # 第一个元素\n            target_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[contains(@class, 'el-tree-node__children')]/div[5]/div\")))  # 第三个元素\n    \n            time.sleep(0.5)\n            # 使用JavaScript进行拖拽\n            driver.execute_script(\"\"\"\n                function simulateDragDrop(sourceNode, destinationNode) {\n                    var EVENT_TYPES = {\n                        DRAG_END: 'dragend',\n                        DRAG_START: 'dragstart',\n                        DROP: 'drop',\n                        DRAG_OVER: 'dragover',\n                        DRAG_ENTER: 'dragenter',\n                        DRAG_LEAVE: 'dragleave'\n                    };\n    \n                    function createCustomEvent(type) {\n                        var event = new CustomEvent(\"CustomEvent\");\n                        event.initCustomEvent(type, true, true, null);\n                        event.dataTransfer = {\n                            data: {},\n                            setData: function(type, val) {\n                                this.data[type] = val;\n                            },\n                            getData: function(type) {\n                                return this.data[type];\n                            }\n                        };\n                        return event;\n                    }\n    \n                    function dispatchEvent(node, type, event) {\n                        if (node.dispatchEvent) {\n                            return node.dispatchEvent(event);\n                        }\n                        if (node.fireEvent) {\n                            return node.fireEvent(\"on\" + type, event);\n                        }\n                    }\n    \n                    var event = createCustomEvent(EVENT_TYPES.DRAG_START);\n                    dispatchEvent(sourceNode, EVENT_TYPES.DRAG_START, event);\n    \n                    // 调整目标元素的位置\n                    var targetRect = destinationNode.getBoundingClientRect();\n                    var targetX = targetRect.left + targetRect.width / 2;\n                    var targetY = targetRect.top - 10; // 向上偏移10像素\n    \n                    var dragOverEvent = createCustomEvent(EVENT_TYPES.DRAG_OVER);\n                    dragOverEvent.clientX = targetX;\n                    dragOverEvent.clientY = targetY;\n                    dispatchEvent(destinationNode, EVENT_TYPES.DRAG_OVER, dragOverEvent);\n    \n                    var dropEvent = createCustomEvent(EVENT_TYPES.DROP);\n                    dropEvent.dataTransfer = event.dataTransfer;\n                    dropEvent.clientX = targetX;\n                    dropEvent.clientY = targetY;\n                    dispatchEvent(destinationNode, EVENT_TYPES.DROP, dropEvent);\n    \n                    var dragEndEvent = createCustomEvent(EVENT_TYPES.DRAG_END);\n                    dragEndEvent.dataTransfer = event.dataTransfer;\n                    dispatchEvent(sourceNode, EVENT_TYPES.DRAG_END, dragEndEvent);\n                }\n    \n                var source = arguments[0];\n                var target = arguments[1];\n                simulateDragDrop(source, target);\n                \"\"\", source_element, target_element)\n    \n            text = wait.until(EC.element_to_be_clickable(\n                (By.XPATH, '//p[@class=\"el-message__content\"]')))\n    \n            if text.text != \"排序号更新成功\":\n                highlight_element(driver, text)\n                allure.attach(driver.get_screenshot_as_png(), name=\"排序号更新失败截图\",\n                              attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, text)\n            assert text.text == \"排序号更新成功\"\n        except Exception as e:\n>           raise e\n\nC:\\Users\\Administrator\\Desktop\\test\\系统设置\\人力资源设置\\组织架构设置\\test_部门设置.py:443: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Administrator\\Desktop\\test\\系统设置\\人力资源设置\\组织架构设置\\test_部门设置.py:365: in test_move\n    target_element = wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[contains(@class, 'el-tree-node__children')]/div[5]/div\")))  # 第三个元素\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0694a2be64a4da7745c9b3bdbc5c2e96\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x000001FDC7E9FEC0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7e301fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff7e301ff00+79264]\nE       \t(No symbol) [0x0x7ff7e2dd9e5a]\nE       \t(No symbol) [0x0x7ff7e2e30586]\nE       \t(No symbol) [0x0x7ff7e2e3083c]\nE       \t(No symbol) [0x0x7ff7e2e84247]\nE       \t(No symbol) [0x0x7ff7e2e589af]\nE       \t(No symbol) [0x0x7ff7e2e8100d]\nE       \t(No symbol) [0x0x7ff7e2e58743]\nE       \t(No symbol) [0x0x7ff7e2e214c1]\nE       \t(No symbol) [0x0x7ff7e2e22253]\nE       \tGetHandleVerifier [0x0x7ff7e32ea2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff7e32e472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff7e3303380+3107360]\nE       \tGetHandleVerifier [0x0x7ff7e303aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff7e30422bf+219487]\nE       \tGetHandleVerifier [0x0x7ff7e3028df4+115860]\nE       \tGetHandleVerifier [0x0x7ff7e3028fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff7e300f558+11256]\nE       \tBaseThreadInitThunk [0x0x7ffab4797374+20]\nE       \tRtlUserThreadStart [0x0x7ffab63dcc91+33]\n\nD:\\t\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"resolution","time":{"start":1753512787151,"stop":1753512787151,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"driver","time":{"start":1753512787151,"stop":1753512789597,"duration":2446},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"login","time":{"start":1753512789598,"stop":1753512797780,"duration":8182},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0},{"name":"navigate_to_department","time":{"start":1753512797780,"stop":1753512801434,"duration":3654},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"afterStages":[{"name":"driver::0","time":{"start":1753512862860,"stop":1753512865629,"duration":2769},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false,"stepsCount":0}],"labels":[{"name":"epic","value":"人力资源设置"},{"name":"feature","value":"组织架构设置"},{"name":"story","value":"部门设置"},{"name":"parentSuite","value":"系统设置.人力资源设置.组织架构设置"},{"name":"suite","value":"test_部门设置"},{"name":"host","value":"JH-KF10"},{"name":"thread","value":"19900-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"系统设置.人力资源设置.组织架构设置.test_部门设置"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"driver","value":"'chrome'"},{"name":"resolution","value":"(1920, 1080)"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":[]},"source":"c27ad00ad0ae948b.json","parameterValues":["'chrome'","(1920, 1080)"]}
{"name": "test_approve_candidates[login0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff74704fea5+79173]\n\tGetHandleVerifier [0x0x7ff74704ff00+79264]\n\t(No symbol) [0x0x7ff746e09e5a]\n\t(No symbol) [0x0x7ff746e1184d]\n\t(No symbol) [0x0x7ff746e1489c]\n\t(No symbol) [0x0x7ff746e1496f]\n\t(No symbol) [0x0x7ff746e6847b]\n\t(No symbol) [0x0x7ff746e65f32]\n\t(No symbol) [0x0x7ff746e62f71]\n\t(No symbol) [0x0x7ff746e61e61]\n\t(No symbol) [0x0x7ff746e53464]\n\t(No symbol) [0x0x7ff746e8896a]\n\t(No symbol) [0x0x7ff746e52d16]\n\t(No symbol) [0x0x7ff746e88b80]\n\t(No symbol) [0x0x7ff746eb100d]\n\t(No symbol) [0x0x7ff746e88743]\n\t(No symbol) [0x0x7ff746e514c1]\n\t(No symbol) [0x0x7ff746e52253]\n\tGetHandleVerifier [0x0x7ff74731a2dd+3004797]\n\tGetHandleVerifier [0x0x7ff74731472d+2981325]\n\tGetHandleVerifier [0x0x7ff747333380+3107360]\n\tGetHandleVerifier [0x0x7ff74706aa2e+188622]\n\tGetHandleVerifier [0x0x7ff7470722bf+219487]\n\tGetHandleVerifier [0x0x7ff747058df4+115860]\n\tGetHandleVerifier [0x0x7ff747058fa9+116297]\n\tGetHandleVerifier [0x0x7ff74703f558+11256]\n\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\n\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"04feb12456faeae8fe07235cd59017aa\")>\n\n    @pytest.fixture(scope=\"function\")\n    def approve_f(driver):\n        wait = WebDriverWait(driver, 20)\n        #点击审批按钮\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//tbody/tr[1]/td[last()]//span\"))).click()\n        #综合测评\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//tbody/tr[1]/td[4]//label[1]/span/span\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//tbody/tr[2]/td[4]//label[1]/span/span\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//tbody/tr[3]/td[4]//label[1]/span/span\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//tbody/tr[4]/td[4]//label[1]/span/span\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//tbody/tr[5]/td[4]//label[1]/span/span\"))).click()\n        time.sleep(3)\n        #就职信息和岗位配置信息\n        #点击选择按钮\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='flex']/button\"))).click()\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='el-dialog__body']//div[label[@for='role_name']]//input\"))).send_keys(\"锯料/技工\")\n        wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='el-dialog__body']//button[span[text()='查询']]\"))).click()\n>       wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='el-dialog__body']//tbody/tr[1]/td[2]//span/span\"))).click()\n\ntest_招聘审批流程.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F3964741A0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...ff74703f558+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.69); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff74704fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff74704ff00+79264]\nE       \t(No symbol) [0x0x7ff746e09e5a]\nE       \t(No symbol) [0x0x7ff746e1184d]\nE       \t(No symbol) [0x0x7ff746e1489c]\nE       \t(No symbol) [0x0x7ff746e1496f]\nE       \t(No symbol) [0x0x7ff746e6847b]\nE       \t(No symbol) [0x0x7ff746e65f32]\nE       \t(No symbol) [0x0x7ff746e62f71]\nE       \t(No symbol) [0x0x7ff746e61e61]\nE       \t(No symbol) [0x0x7ff746e53464]\nE       \t(No symbol) [0x0x7ff746e8896a]\nE       \t(No symbol) [0x0x7ff746e52d16]\nE       \t(No symbol) [0x0x7ff746e88b80]\nE       \t(No symbol) [0x0x7ff746eb100d]\nE       \t(No symbol) [0x0x7ff746e88743]\nE       \t(No symbol) [0x0x7ff746e514c1]\nE       \t(No symbol) [0x0x7ff746e52253]\nE       \tGetHandleVerifier [0x0x7ff74731a2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff74731472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff747333380+3107360]\nE       \tGetHandleVerifier [0x0x7ff74706aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff7470722bf+219487]\nE       \tGetHandleVerifier [0x0x7ff747058df4+115860]\nE       \tGetHandleVerifier [0x0x7ff747058fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff74703f558+11256]\nE       \tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\nE       \tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: StaleElementReferenceException"}, "parameters": [{"name": "login", "value": "{'username': 'JH-03173', 'password': '123456'}"}], "start": 1751939654242, "stop": 1751939654242, "uuid": "fb8f7cae-97fc-45a0-9cd1-d517fdc5aa08", "historyId": "294b428947c0596cf623a5f8e690c7ed", "testCaseId": "d0c416a3a838d84fbf3ac19912da48f5", "fullName": "test_招聘审批流程#test_approve_candidates", "labels": [{"name": "suite", "value": "test_招聘审批流程"}, {"name": "host", "value": "JH-KF10"}, {"name": "thread", "value": "3112-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_招聘审批流程"}]}
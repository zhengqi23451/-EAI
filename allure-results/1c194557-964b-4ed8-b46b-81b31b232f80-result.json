{"name": "test_approve_candidates[login2]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff74704fea5+79173]\n\tGetHandleVerifier [0x0x7ff74704ff00+79264]\n\t(No symbol) [0x0x7ff746e09e5a]\n\t(No symbol) [0x0x7ff746df5c25]\n\t(No symbol) [0x0x7ff746e1ac44]\n\t(No symbol) [0x0x7ff746e903c5]\n\t(No symbol) [0x0x7ff746eb0922]\n\t(No symbol) [0x0x7ff746e88743]\n\t(No symbol) [0x0x7ff746e514c1]\n\t(No symbol) [0x0x7ff746e52253]\n\tGetHandleVerifier [0x0x7ff74731a2dd+3004797]\n\tGetHandleVerifier [0x0x7ff74731472d+2981325]\n\tGetHandleVerifier [0x0x7ff747333380+3107360]\n\tGetHandleVerifier [0x0x7ff74706aa2e+188622]\n\tGetHandleVerifier [0x0x7ff7470722bf+219487]\n\tGetHandleVerifier [0x0x7ff747058df4+115860]\n\tGetHandleVerifier [0x0x7ff747058fa9+116297]\n\tGetHandleVerifier [0x0x7ff74703f558+11256]\n\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\n\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cfa559918ee310c169e537a247a71b3d\")>\nlogin = {'password': '350715', 'title': '部门经理审批意见', 'username': 'JH-00849'}\n\n    @pytest.fixture(scope=\"function\")\n    def navigate_to_approval(driver, login):\n        \"\"\"导航到审批页面\"\"\"\n        window_size = driver.get_window_size()\n        width, height = window_size[\"width\"], window_size[\"height\"]\n        wait = WebDriverWait(driver, 20)\n        try:\n            # 点击协同办公设置\n            wait.until(EC.element_to_be_clickable((By.XPATH, '//div[@class=\"menu-bar\"]/ul/li[text()=\" 协同办公 \"]'))).click()\n            if width<=1366:\n                #点击扩展列表\n                wait.until(EC.element_to_be_clickable((By.XPATH,'//div[@class=\"menu-bar\"]/div[@class=\"flex flex-x-center flex-y-center fold-box\"]/i'))).click()\n            #点击我的工作\n            wait.until(EC.element_to_be_clickable((By.XPATH, '//div[@class=\"sidebar-container\"]//li//span[text()=\"我的工作\"]'))).click()\n            #点击我的审批\n            wait.until(EC.element_to_be_clickable((By.XPATH, '//div[@class=\"sidebar-container\"]//li/ul//span[text()=\"我的审批\"]'))).click()\n    \n            # 验证页面加载\n            time.sleep(2)\n            title = wait.until(EC.presence_of_element_located(\n                (By.XPATH, '//section//div[@class=\"table-info-bar flex flex-x-sb flex-y-center\"]/div[@class=\"left flex flex-y-center\"]/span[@class=\"title\"]')))\n            if title.text !=\"我的审批\":\n                highlight_element(driver,title)\n                allure.attach(driver.get_screenshot_as_png(), name=\"导航到审批页面失败截图\",attachment_type=allure.attachment_type.PNG)\n                reset_element(driver,title)\n            assert title.text == \"我的审批\"\n        except Exception as e:\n            # 截图并附加到 Allure 报告\n>           raise e\n\ntest_招聘审批流程.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_招聘审批流程.py:83: in navigate_to_approval\n    wait.until(EC.element_to_be_clickable((By.XPATH, '//div[@class=\"menu-bar\"]/ul/li[text()=\" 协同办公 \"]'))).click()\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018892DF5A90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff74703f558+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff74704fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff74704ff00+79264]\nE       \t(No symbol) [0x0x7ff746e09e5a]\nE       \t(No symbol) [0x0x7ff746df5c25]\nE       \t(No symbol) [0x0x7ff746e1ac44]\nE       \t(No symbol) [0x0x7ff746e903c5]\nE       \t(No symbol) [0x0x7ff746eb0922]\nE       \t(No symbol) [0x0x7ff746e88743]\nE       \t(No symbol) [0x0x7ff746e514c1]\nE       \t(No symbol) [0x0x7ff746e52253]\nE       \tGetHandleVerifier [0x0x7ff74731a2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff74731472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff747333380+3107360]\nE       \tGetHandleVerifier [0x0x7ff74706aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff7470722bf+219487]\nE       \tGetHandleVerifier [0x0x7ff747058df4+115860]\nE       \tGetHandleVerifier [0x0x7ff747058fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff74703f558+11256]\nE       \tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\nE       \tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "parameters": [{"name": "login", "value": "{'username': 'JH-00849', 'password': '350715', 'title': '部门经理审批意见'}"}], "start": 1751942073892, "stop": 1751942073892, "uuid": "09c76e17-7076-4595-8718-5ea0fe95fa8d", "historyId": "d1fb237c2c0293dd9325d934689b1c30", "testCaseId": "d0c416a3a838d84fbf3ac19912da48f5", "fullName": "test_招聘审批流程#test_approve_candidates", "labels": [{"name": "suite", "value": "test_招聘审批流程"}, {"name": "host", "value": "JH-KF10"}, {"name": "thread", "value": "27004-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_招聘审批流程"}]}
{"name": "test_file_style[resolution0-chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n\tGetHandleVerifier [0x0x7ff73fc5fea5+79173]\n\tGetHandleVerifier [0x0x7ff73fc5ff00+79264]\n\t(No symbol) [0x0x7ff73fa19c8c]\n\t(No symbol) [0x0x7ff73fa605ef]\n\t(No symbol) [0x0x7ff73fa98832]\n\t(No symbol) [0x0x7ff73fa93233]\n\t(No symbol) [0x0x7ff73fa922f9]\n\t(No symbol) [0x0x7ff73f9e5fc5]\n\tGetHandleVerifier [0x0x7ff73ff2a2dd+3004797]\n\tGetHandleVerifier [0x0x7ff73ff2472d+2981325]\n\tGetHandleVerifier [0x0x7ff73ff43380+3107360]\n\tGetHandleVerifier [0x0x7ff73fc7aa2e+188622]\n\tGetHandleVerifier [0x0x7ff73fc822bf+219487]\n\t(No symbol) [0x0x7ff73f9e5036]\n\tGetHandleVerifier [0x0x7ff740043c78+4158232]\n\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\n\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a76f06423e39de91ea189bdf47adb6a3\")>, login = None\n\n    @pytest.fixture(scope=\"module\")\n    def navigate_to_addjl(driver, login):\n        \"\"\"导航到新增简历页面\"\"\"\n>       window_size = driver.get_window_size()\n                      ^^^^^^^^^^^^^^^^^^^^^^^^\n\ntest_新增简历.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1058: in get_window_size\n    size = self.get_window_rect()\n           ^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1109: in get_window_rect\n    return self.execute(Command.GET_WINDOW_RECT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EF625BDA90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"\\\\tGetHa...740043c78+4158232]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff73fc5fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff73fc5ff00+79264]\nE       \t(No symbol) [0x0x7ff73fa19c8c]\nE       \t(No symbol) [0x0x7ff73fa605ef]\nE       \t(No symbol) [0x0x7ff73fa98832]\nE       \t(No symbol) [0x0x7ff73fa93233]\nE       \t(No symbol) [0x0x7ff73fa922f9]\nE       \t(No symbol) [0x0x7ff73f9e5fc5]\nE       \tGetHandleVerifier [0x0x7ff73ff2a2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff73ff2472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff73ff43380+3107360]\nE       \tGetHandleVerifier [0x0x7ff73fc7aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff73fc822bf+219487]\nE       \t(No symbol) [0x0x7ff73f9e5036]\nE       \tGetHandleVerifier [0x0x7ff740043c78+4158232]\nE       \tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\nE       \tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\n\n..\\..\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "description": "样式比较", "parameters": [{"name": "resolution", "value": "(1920, 1080)"}, {"name": "driver", "value": "'chrome'"}], "start": 1751419150490, "stop": 1751419150490, "uuid": "a994fa23-be96-42b0-9888-480f953d612e", "historyId": "a513ccd21a4f5e58ca821b1c70d294be", "testCaseId": "53705468319abf832f3a7235e8098e47", "fullName": "test_新增简历#test_file_style", "labels": [{"name": "feature", "value": "人力资源"}, {"name": "story", "value": "新简历输入"}, {"name": "suite", "value": "test_新增简历"}, {"name": "host", "value": "JH-KF10"}, {"name": "thread", "value": "31532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_新增简历"}]}
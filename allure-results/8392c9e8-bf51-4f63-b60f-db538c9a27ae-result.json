{"name": "test_approve[login4]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff74704fea5+79173]\n\tGetHandleVerifier [0x0x7ff74704ff00+79264]\n\t(No symbol) [0x0x7ff746e09e5a]\n\t(No symbol) [0x0x7ff746df5c25]\n\t(No symbol) [0x0x7ff746e1ac44]\n\t(No symbol) [0x0x7ff746e903c5]\n\t(No symbol) [0x0x7ff746eb0922]\n\t(No symbol) [0x0x7ff746e88743]\n\t(No symbol) [0x0x7ff746e514c1]\n\t(No symbol) [0x0x7ff746e52253]\n\tGetHandleVerifier [0x0x7ff74731a2dd+3004797]\n\tGetHandleVerifier [0x0x7ff74731472d+2981325]\n\tGetHandleVerifier [0x0x7ff747333380+3107360]\n\tGetHandleVerifier [0x0x7ff74706aa2e+188622]\n\tGetHandleVerifier [0x0x7ff7470722bf+219487]\n\tGetHandleVerifier [0x0x7ff747058df4+115860]\n\tGetHandleVerifier [0x0x7ff747058fa9+116297]\n\tGetHandleVerifier [0x0x7ff74703f558+11256]\n\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\n\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"103bd4803981faa29ba4e805fa146ab9\")>\nlogin = {'password': '1231234567', 'title': '董事长审批意见', 'username': 'JH-00001'}\nnavigate_to_approval = None\n\n    @pytest.mark.parametrize(\"login\", [\n        #人事助理\n        #{\"username\": \"JH-03502\", \"password\": \"307306\"},\n        #人事经理\n        {\"username\": \"JH-03173\", \"password\": \"123456\"},\n        #组长\n        {\"username\": \"JH-01048\", \"password\": \"123456\",\"title\":\"车间/主任审批意见\"},\n        #部门经理\n        {\"username\": \"JH-00849\", \"password\": \"350715\",\"title\":\"生产部经理审批意见\"},\n        #部门副总（暂无）\n        #{\"username\": \"JH-03173\", \"password\": \"123456\"},\n        #总经理\n        {\"username\": \"JH-01562\", \"password\": \"520308\",\"title\":\"总经理审批意见\"},\n        #董事长\n        {\"username\": \"JH-00001\", \"password\": \"1231234567\",\"title\":\"董事长审批意见\"},\n    ], indirect=True)\n    def test_approve(driver, login,navigate_to_approval):\n        print(f\"Login data: {login}\")\n        if login['username']=='JH-03173':\n            approve_f(driver)\n        else:\n            title = login.get(\"title\", \"\")\n>           approve_result = approve_candidate(driver, title)\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntest_招聘审批流程.py:287: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_招聘审批流程.py:129: in approve_candidate\n    raise  e\ntest_招聘审批流程.py:119: in approve_candidate\n    wait.until(EC.element_to_be_clickable((By.XPATH, f\"//div[div[contains(text(), '{title}')]]//textarea\"))).send_keys(\"同意\")\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002CF7736F490>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff74703f558+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff74704fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff74704ff00+79264]\nE       \t(No symbol) [0x0x7ff746e09e5a]\nE       \t(No symbol) [0x0x7ff746df5c25]\nE       \t(No symbol) [0x0x7ff746e1ac44]\nE       \t(No symbol) [0x0x7ff746e903c5]\nE       \t(No symbol) [0x0x7ff746eb0922]\nE       \t(No symbol) [0x0x7ff746e88743]\nE       \t(No symbol) [0x0x7ff746e514c1]\nE       \t(No symbol) [0x0x7ff746e52253]\nE       \tGetHandleVerifier [0x0x7ff74731a2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff74731472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff747333380+3107360]\nE       \tGetHandleVerifier [0x0x7ff74706aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff7470722bf+219487]\nE       \tGetHandleVerifier [0x0x7ff747058df4+115860]\nE       \tGetHandleVerifier [0x0x7ff747058fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff74703f558+11256]\nE       \tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\nE       \tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "attachments": [{"name": "stdout", "source": "5cb67b05-9bf7-41ae-b1cc-7e4582273ac5-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "login", "value": "{'username': 'JH-00001', 'password': '1231234567', 'title': '董事长审批意见'}"}], "start": 1751960897618, "stop": 1751960915346, "uuid": "0b477d19-081d-4b40-a38a-4113b5ea810d", "historyId": "5ac52f538517a59779cd06f1a74b0603", "testCaseId": "c85faf5b505755753bed6f5505b4a772", "fullName": "test_招聘审批流程#test_approve", "labels": [{"name": "suite", "value": "test_招聘审批流程"}, {"name": "host", "value": "JH-KF10"}, {"name": "thread", "value": "7644-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_招聘审批流程"}]}
{"name": "test_addjl_save[resolution0-chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input type=\"text\" readonly=\"readonly\" autocomplete=\"off\" placeholder=\"请选择\" class=\"el-input__inner\"> is not clickable at point (957, 913). Other element would receive the click: <div data-v-3067c32b=\"\" data-v-8539d716=\"\" class=\"el-dialog__wrapper dialog\" style=\"z-index: 2018;\">...</div>\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff711e4fea5+79173]\n\tGetHandleVerifier [0x0x7ff711e4ff00+79264]\n\t(No symbol) [0x0x7ff711c09e5a]\n\t(No symbol) [0x0x7ff711c68599]\n\t(No symbol) [0x0x7ff711c65f32]\n\t(No symbol) [0x0x7ff711c62f71]\n\t(No symbol) [0x0x7ff711c61e61]\n\t(No symbol) [0x0x7ff711c53464]\n\t(No symbol) [0x0x7ff711c8896a]\n\t(No symbol) [0x0x7ff711c52d16]\n\t(No symbol) [0x0x7ff711c88b80]\n\t(No symbol) [0x0x7ff711cb100d]\n\t(No symbol) [0x0x7ff711c88743]\n\t(No symbol) [0x0x7ff711c514c1]\n\t(No symbol) [0x0x7ff711c52253]\n\tGetHandleVerifier [0x0x7ff71211a2dd+3004797]\n\tGetHandleVerifier [0x0x7ff71211472d+2981325]\n\tGetHandleVerifier [0x0x7ff712133380+3107360]\n\tGetHandleVerifier [0x0x7ff711e6aa2e+188622]\n\tGetHandleVerifier [0x0x7ff711e722bf+219487]\n\tGetHandleVerifier [0x0x7ff711e58df4+115860]\n\tGetHandleVerifier [0x0x7ff711e58fa9+116297]\n\tGetHandleVerifier [0x0x7ff711e3f558+11256]\n\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\n\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6f43a7fd22563fd9f7e4a7eb9176e365\")>\nnavigate_to_addjl = None\n\n    @allure.feature(\"人力资源\")\n    @allure.story(\"新简历输入\")\n    @allure.description(\"保存简历\")\n    @pytest.mark.parametrize(\"driver\",['chrome'],indirect=True)\n    def test_addjl_save(driver,navigate_to_addjl):\n        wait = WebDriverWait(driver, 10)\n        try:\n            #姓名\n            wait.until(EC.presence_of_element_located((By.XPATH,\"//div[contains(@class,'el-row')]//div[label[@for='name']]//input\"))).send_keys(\"test2\")\n            #身份证\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='id_card']]//input\"))).send_keys(\"320830199506109319\")\n            #户口地址\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='hukou_address']]//input\"))).send_keys(\"地球村\")\n            #民族\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='nation']]//input\"))).click()\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@x-placement='bottom-start']//span[text()='汉族']\"))).click()\n            #身高体重\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='height']]//input\"))).send_keys(160)\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='weight']]//input\"))).send_keys(50)\n            #婚姻\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='marriage']]//input\"))).click()\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@x-placement='bottom-start']//span[text()='未婚']\"))).click()\n            #政治面貌\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='political_status']]//input\"))).click()\n            time.sleep(1)\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@x-placement='bottom-start']//span[text()='群众']\"))).click()\n            #健康\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='health']]//input\"))).click()\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@x-placement='bottom-start']//span[text()='良好']\"))).click()\n            #血型\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='blood_type']]//input\"))).click()\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@x-placement='bottom-start']//span[text()='A型']\"))).click()\n            #公益献血\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='public_welfare']]//input\"))).click()\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@x-placement='bottom-start']//span[text()='暂无考虑']\"))).click()\n            #目标月薪\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='salary']]//input\"))).send_keys(3000)\n            #现住地址\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='current_address']]//input\"))).send_keys(\"地球\")\n            #学历\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='education']]//input\"))).click()\n            time.sleep(1)\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@x-placement='bottom-start']//span[text()='大专']\"))).click()\n            #专业\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='speciality']]//input\"))).send_keys(\"土木工程\")\n            #毕业时间\n            time.sleep(1)\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='edu_end_time']]//input\"))).send_keys(\"2025-05-01\")\n            #毕业学校\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='school']]//input\"))).send_keys(\"人文学院\")\n            #手机号\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='mobile']]//input\"))).send_keys(\"17551532053\")\n            #紧急联系人\n            #称谓\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='urgent_cont[0].appellation']]//input\"))).send_keys(\"父亲\")\n            #姓名\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='urgent_cont[0].urgent_name']]//input\"))).send_keys(\"father\")\n            #手机号\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='urgent_cont[0].urgent_mobile']]//input\"))).send_keys(\"18863968352\")\n    \n            #选择图片\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='grid-col flex-x-center el-col el-col-24']//span\"))).click()\n            time.sleep(20)\n    \n            # 选择普件\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='incident']]//input\"))).click()\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@x-placement='top-start']//li[span[text()='普件']]\"))).click()\n            # 点击提交\n            time.sleep(1)\n            wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[@class='form-bottom-bar flex flex-x-center']/button[span[text()='提交']]\"))).click()\n    \n            title = wait.until(EC.presence_of_element_located(\n                (By.XPATH, \"//div[contains(@class,'el-message')]/p[contains(text(),'保存成功')]\")))\n            if title!=\"提交成功\":\n                highlight_element(driver,title)\n                allure.attach(driver.get_screenshot_as_png(), name=\"保存失败高亮截图\", attachment_type=allure.attachment_type.PNG)\n                reset_element(driver, title)\n            assert title.text == \"提交成功\"\n    \n        except Exception as e:\n            # 截图并附加到 Allure 报告\n            #allure.attach(driver.get_screenshot_as_png(), name=\"保存失败截图\", attachment_type=allure.attachment_type.PNG)\n>           raise e\n\ntest_新增简历.py:343: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_新增简历.py:326: in test_addjl_save\n    wait.until(EC.element_to_be_clickable((By.XPATH, \"//div[label[@for='incident']]//input\"))).click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028EAF064980>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff711e3f558+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input type=\"text\" readonly=\"readonly\" autocomplete=\"off\" placeholder=\"请选择\" class=\"el-input__inner\"> is not clickable at point (957, 913). Other element would receive the click: <div data-v-3067c32b=\"\" data-v-8539d716=\"\" class=\"el-dialog__wrapper dialog\" style=\"z-index: 2018;\">...</div>\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff711e4fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff711e4ff00+79264]\nE       \t(No symbol) [0x0x7ff711c09e5a]\nE       \t(No symbol) [0x0x7ff711c68599]\nE       \t(No symbol) [0x0x7ff711c65f32]\nE       \t(No symbol) [0x0x7ff711c62f71]\nE       \t(No symbol) [0x0x7ff711c61e61]\nE       \t(No symbol) [0x0x7ff711c53464]\nE       \t(No symbol) [0x0x7ff711c8896a]\nE       \t(No symbol) [0x0x7ff711c52d16]\nE       \t(No symbol) [0x0x7ff711c88b80]\nE       \t(No symbol) [0x0x7ff711cb100d]\nE       \t(No symbol) [0x0x7ff711c88743]\nE       \t(No symbol) [0x0x7ff711c514c1]\nE       \t(No symbol) [0x0x7ff711c52253]\nE       \tGetHandleVerifier [0x0x7ff71211a2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff71211472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff712133380+3107360]\nE       \tGetHandleVerifier [0x0x7ff711e6aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff711e722bf+219487]\nE       \tGetHandleVerifier [0x0x7ff711e58df4+115860]\nE       \tGetHandleVerifier [0x0x7ff711e58fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff711e3f558+11256]\nE       \tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\nE       \tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "description": "保存简历", "parameters": [{"name": "resolution", "value": "(1920, 1080)"}, {"name": "driver", "value": "'chrome'"}], "start": 1752109985235, "stop": 1752110017905, "uuid": "5d77ed9a-f306-4e73-aca6-7a9b640b84bd", "historyId": "eb27843358812f9a12e54576aed7caa3", "testCaseId": "b6782687b453c28cc98817fb0727a7d6", "fullName": "test_新增简历#test_addjl_save", "labels": [{"name": "story", "value": "新简历输入"}, {"name": "feature", "value": "人力资源"}, {"name": "suite", "value": "test_新增简历"}, {"name": "host", "value": "JH-KF10"}, {"name": "thread", "value": "19076-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_新增简历"}]}
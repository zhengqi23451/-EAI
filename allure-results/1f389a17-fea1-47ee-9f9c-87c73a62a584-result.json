{"name": "test_approve_candidates[login1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_SSL_PROTOCOL_ERROR\n  (Session info: chrome=137.0.7151.69)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff70ee1fea5+79173]\n\tGetHandleVerifier [0x0x7ff70ee1ff00+79264]\n\t(No symbol) [0x0x7ff70ebd9e5a]\n\t(No symbol) [0x0x7ff70ebd6874]\n\t(No symbol) [0x0x7ff70ebc7589]\n\t(No symbol) [0x0x7ff70ebc9331]\n\t(No symbol) [0x0x7ff70ebc78a6]\n\t(No symbol) [0x0x7ff70ebc7306]\n\t(No symbol) [0x0x7ff70ebc6fca]\n\t(No symbol) [0x0x7ff70ebc4b9f]\n\t(No symbol) [0x0x7ff70ebc541c]\n\t(No symbol) [0x0x7ff70ebdde0a]\n\t(No symbol) [0x0x7ff70ec81dfe]\n\t(No symbol) [0x0x7ff70ec5896a]\n\t(No symbol) [0x0x7ff70ec8100d]\n\t(No symbol) [0x0x7ff70ec58743]\n\t(No symbol) [0x0x7ff70ec214c1]\n\t(No symbol) [0x0x7ff70ec22253]\n\tGetHandleVerifier [0x0x7ff70f0ea2dd+3004797]\n\tGetHandleVerifier [0x0x7ff70f0e472d+2981325]\n\tGetHandleVerifier [0x0x7ff70f103380+3107360]\n\tGetHandleVerifier [0x0x7ff70ee3aa2e+188622]\n\tGetHandleVerifier [0x0x7ff70ee422bf+219487]\n\tGetHandleVerifier [0x0x7ff70ee28df4+115860]\n\tGetHandleVerifier [0x0x7ff70ee28fa9+116297]\n\tGetHandleVerifier [0x0x7ff70ee0f558+11256]\n\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\n\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]", "trace": "browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"90b31fdb90f37ce096223b1ce9dea8c5\")>\nrequest = <SubRequest 'login' for <Function test_approve_candidates[login1]>>\n\n    @pytest.fixture(scope=\"function\")\n    def login(browser, request):\n        username = request.param.get(\"username\")\n        password = request.param.get(\"password\")\n>       browser.get(\"https://192.168.2.42:9529\")\n\ntest_审批流程.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:472: in get\n    self.execute(Command.GET, {\"url\": url})\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002CEFD9220D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_SSL_PROTOCOL_ERROR\\\\n  ...ff70ee0f558+11256]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_SSL_PROTOCOL_ERROR\nE         (Session info: chrome=137.0.7151.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff70ee1fea5+79173]\nE       \tGetHandleVerifier [0x0x7ff70ee1ff00+79264]\nE       \t(No symbol) [0x0x7ff70ebd9e5a]\nE       \t(No symbol) [0x0x7ff70ebd6874]\nE       \t(No symbol) [0x0x7ff70ebc7589]\nE       \t(No symbol) [0x0x7ff70ebc9331]\nE       \t(No symbol) [0x0x7ff70ebc78a6]\nE       \t(No symbol) [0x0x7ff70ebc7306]\nE       \t(No symbol) [0x0x7ff70ebc6fca]\nE       \t(No symbol) [0x0x7ff70ebc4b9f]\nE       \t(No symbol) [0x0x7ff70ebc541c]\nE       \t(No symbol) [0x0x7ff70ebdde0a]\nE       \t(No symbol) [0x0x7ff70ec81dfe]\nE       \t(No symbol) [0x0x7ff70ec5896a]\nE       \t(No symbol) [0x0x7ff70ec8100d]\nE       \t(No symbol) [0x0x7ff70ec58743]\nE       \t(No symbol) [0x0x7ff70ec214c1]\nE       \t(No symbol) [0x0x7ff70ec22253]\nE       \tGetHandleVerifier [0x0x7ff70f0ea2dd+3004797]\nE       \tGetHandleVerifier [0x0x7ff70f0e472d+2981325]\nE       \tGetHandleVerifier [0x0x7ff70f103380+3107360]\nE       \tGetHandleVerifier [0x0x7ff70ee3aa2e+188622]\nE       \tGetHandleVerifier [0x0x7ff70ee422bf+219487]\nE       \tGetHandleVerifier [0x0x7ff70ee28df4+115860]\nE       \tGetHandleVerifier [0x0x7ff70ee28fa9+116297]\nE       \tGetHandleVerifier [0x0x7ff70ee0f558+11256]\nE       \tBaseThreadInitThunk [0x0x7ffda8bf7374+20]\nE       \tRtlUserThreadStart [0x0x7ffdaa1fcc91+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "parameters": [{"name": "login", "value": "{'username': 'admin2', 'password': 'password2'}"}], "start": 1751618722629, "stop": 1751618722629, "uuid": "c0bd560d-cbbb-40eb-8a09-646cbca7339f", "historyId": "ff1d9fa1b04dd0bc482811c8746ad57c", "testCaseId": "fa7738f97c20fcff0c1f833201952ff0", "fullName": "test_审批流程#test_approve_candidates", "labels": [{"name": "suite", "value": "test_审批流程"}, {"name": "host", "value": "JH-KF10"}, {"name": "thread", "value": "7940-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_审批流程"}]}